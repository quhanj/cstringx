# 设置 CMake 最低版本要求
cmake_minimum_required(VERSION 3.10)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
project(cstringx LANGUAGES C)
set(PROJECT_DESCRIPTION "additional functions with char* by quhan with c")
set(PROJECT_URL "https://coder.quhan.org/${PROJECT_NAME}")
set(CDATE "2025-3-13")

if (CMAKE_SYSTEM_NAME STREQUAL "Linux")
	set(CMAKE_INSTALL_PREFIX "/usr")
elseif (CMAKE_SYSTEM_NAME STREQUAL "Windows")
	message(FATAL_ERROR "This is a Windows system.")
elseif (CMAKE_SYSTEM_NAME STREQUAL "Darwin")
	set(CMAKE_INSTALL_PREFIX "/opt/my")
else()
	message(FATAL_ERROR "Unknown system: ${CMAKE_SYSTEM_NAME}")
endif()

include(../common.cmake)
set(PROJECT_VERSION "0.${V1}.${V0}")
set(PROJECT_SOVERSION 0)
message(${PROJECT_NAME} " " ${PROJECT_VERSION} " compatibled " ${PROJECT_SOVERSION})
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g -O0 -W -Wall")
get_property(DYLD_PATH DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY LINK_DIRECTORIES)
message(STATUS "${DYLD_PATH}")
add_library("${PROJECT_NAME}" SHARED "src/cstringx.c")
# target_link_libraries(${PROJECT_NAME})
install(TARGETS "${PROJECT_NAME}" DESTINATION lib)
install(FILES "inc/${PROJECT_NAME}.h" DESTINATION include)

if (CMAKE_SYSTEM_NAME STREQUAL "Linux")
	set(CPACK_GENERATOR "DEB")
	set(CPACK_PACKAGE_NAME "${PROJECT_NAME}")
	set(CPACK_PACKAGE_VERSION "${PROJECT_VERSION}")
	set(CPACK_DEBIAN_PACKAGE_NAME "lib${PROJECT_NAME}")
	set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE "arm64")
	set(CPACK_DEBIAN_PACKAGE_MAINTAINER "Quhan Jiang <quhan@web.de>")
	set(CPACK_DEBIAN_PACKAGE_DESCRIPTION "...")
	set(CPACK_DEBIAN_PACKAGE_DEPENDS "") # 如果有依赖
	set(CPACK_DEBIAN_PACKAGE_SECTION "net") # 或者其他合适的部分
	set(CPACK_DEBIAN_PACKAGE_PRIORITY "optional")
	include(CPack)
endif()
